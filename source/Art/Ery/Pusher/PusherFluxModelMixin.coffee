{
  defineModule, log, merge
} = require 'art-foundation'

{config} = require './Config'

###
SBD 2-1-2017

How do we get PusherLinkMixin included in the models generated by the pipelines?
  Ex: class foo extends PusherFluxModelMixin FluxModel

An idea - let the pipeline specify one or more mixins?

The make a PisherPipelineMixin - which just registers the PusherFluxModelMixin
###

###
Notes:

- To use Pusher, be sure to include the pusher client library and initialize
  a global "window.pusher" client object. Ex:

  window.pusher = new Pusher 'PUSHER-CLIENT-KEY'

- This extends the ParseDbModel. To use Parse, include the Parse client libarary
  such that "window.Parse" is set up.

- Code in this file only receives "changed" pusher events. It doesn't send them.
  You need to add code to your Parse cloud-code to generate this events when
  Parse objects change.

PusherFluxModelMixin maintains pusher subscriptions to match FluxStore subscriptions.
PusherFluxModelMixin is intended to be mixed into Art.Flux.FluxModels.
###
defineModule module, -> (superClass) -> class PusherFluxModelMixin extends superClass
  constructor: ->
    super
    @_channels = {}
    @_listeners = {}

  ####################
  # FluxModel Overrides
  ####################
  fluxStoreEntryUpdated: ({key, subscribers}) ->
    @_subscribe key if subscribers.length > 0  # have local subscribers
    super

  fluxStoreEntryRemoved: ({key}) ->
    @_unsubscribe key
    super

  ####################
  # PRIVATE
  ####################
  _getPusherChannel: (key) ->
    config.getPusherChannel @pipeline.name, key

  # Pusher has the concept of subscribe & bind
  # This does both in one step
  # If config.pusher isn't defined: noop
  _subscribe: (key) ->
    {pusher, pusherEventName} = config

    @_channels[key] ||= pusher?.subscribe @_getPusherChannel key
    unless @_listeners[key]
      @_channels[key].bind pusherEventName, @_listeners[key] = => @load key

  # If config.pusher isn't defined: noop
  _unsubscribe: (key) ->
    {pusher, pusherEventName} = config
    return unless pusher && @_channels[key]

    # unbind
    if @_listeners[key]
      @_channels[key]?.unbind pusherEventName, @_listeners[key]
      delete @_listeners[key]

    # unsubscribe
    pusher.unsubscribe @_getPusherChannel key
    delete @_channels[key]
