{
  defineModule, log, merge
} = require 'art-foundation'

{getPusherChannel, pusherEventName} = require './Common'

###
SBD 2-1-2017

How do we get PusherLinkMixin included in the models generated by the pipelines?
  Ex: class foo extends PusherFluxModelMixin FluxModel

An idea - let the pipeline specify one or more mixins?

The make a PisherPipelineMixin - which just registers the PusherFluxModelMixin
###

###
Notes:

- To use Pusher, be sure to include the pusher client library and initialize
  a global "window.pusher" client object. Ex:

  window.pusher = new Pusher 'PUSHER-CLIENT-KEY'

- This extends the ParseDbModel. To use Parse, include the Parse client libarary
  such that "window.Parse" is set up.

- Code in this file only receives "changed" pusher events. It doesn't send them.
  You need to add code to your Parse cloud-code to generate this events when
  Parse objects change.

PusherFluxModelMixin maintains pusher subscriptions to match FluxStore subscriptions.
PusherFluxModelMixin is intended to be mixed into Art.Flux.FluxModels.
###
defineModule module, -> (superClass) -> class PusherFluxModelMixin extends superClass
  constructor: ->
    super
    @_openPusherChannels = {}
    @_pusherChannelListeners = {}

  fluxStoreEntryUpdated: ({key, subscribers}) ->
    super
    return unless self.pusher             # pusher is setup
    return unless subscribers.length > 0  # have local subscribers
    return if @_openPusherChannels[key]   # not subscribed in pusher channel

    @_pusherChannelListeners[key] ||= => @load key
    @_openPusherChannels[key] = pusher.subscribe @_getPusherChannel key
    @_openPusherChannels[key].bind pusherEventName, @_pusherChannelListeners[key]

  fluxStoreEntryRemoved: ({key}) ->
    super
    return unless self.pusher               # pusher is setup
    return unless @_openPusherChannels[key] # subscribed to pusher channel

    pusher.unsubscribe @_getPusherChannel key
    @_openPusherChannels[key].unbind pusherEventName, @_pusherChannelListeners[key]
    delete @_openPusherChannels[key]
    delete @_pusherChannelListeners[key]

  # private
  _getPusherChannel: (key) ->
    getPusherChannel @pipeline.name, key
